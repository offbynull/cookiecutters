#ifndef {{ cookiecutter.project_name|upper }}_MATH_HELPERS_PYTHON_EXTENSION_H
#define {{ cookiecutter.project_name|upper }}_MATH_HELPERS_PYTHON_EXTENSION_H

{% if 'pybind11' in cookiecutter.include_python_extension -%}
#include <vector>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "{{ cookiecutter.project_name }}/math/helpers.h"

namespace {{ cookiecutter.project_name|lower }}::math::helpers::helpers_python_extension {
    using {{ cookiecutter.project_name|lower }}::math::helpers::Helpers;

    class HelpersPythonExtension {
    public:
        static long long sum_of_squares_cpp(const std::vector<long long>& v) {
            return Helpers<long long>::sum_of_squares(v);
        }

        static double average_cpp(const std::vector<long long>& v) {
            return Helpers<long long>::average(v);
        }
    };

    PYBIND11_MODULE(helpers_python_extension, m) {
        m.doc() = "Math helpers.";
        m.def("sum_of_squares", &HelpersPythonExtension::sum_of_squares_cpp, "Sum of squares of ints");
        m.def("average", &HelpersPythonExtension::average_cpp, "Average of ints");
    }
}
{%- elif 'boost' in cookiecutter.include_python_extension -%}
#include <vector>
#include <boost/python.hpp>
#include <boost/python/stl_iterator.hpp>
#include "{{ cookiecutter.project_name }}/math/helpers.h"

namespace {{ cookiecutter.project_name|lower }}::math::helpers::helpers_python_extension {
    using {{ cookiecutter.project_name|lower }}::math::helpers::Helpers;

    class HelpersPythonExtension {
    public:
        static std::vector<long long> to_vec_ll(const boost::python::object& iterable) {
            boost::python::stl_input_iterator<long long> begin { iterable };
            boost::python::stl_input_iterator<long long> end {};
            return std::vector<long long>(begin, end);
        }

        static long long sum_of_squares_bp(const boost::python::object& seq) {
            return Helpers<long long>::sum_of_squares(to_vec_ll(seq));
        }

        static double average_bp(const boost::python::object& seq) {
            return Helpers<long long>::average(to_vec_ll(seq));
        }
    };

    BOOST_PYTHON_MODULE(helpers_python_extension) {
        boost::python::def("sum_of_squares", &HelpersPythonExtension::sum_of_squares_bp);
        boost::python::def("average", &HelpersPythonExtension::average_bp);
    }
}
{%- else -%}
UNSUPPORTED PYTHON EXTENSION TYPE CHOSEN IN TEMPLATE.
{%- endif %}

#endif //{{ cookiecutter.project_name|upper }}_MATH_HELPERS_PYTHON_EXTENSION_H