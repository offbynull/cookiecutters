# NOTE: If you change something in this workflow (e.g., bug fix, workaround, optimization, ...), make sure the cookiecutter is updated as
#       well.
name: setup-windows-msvc
runs:
  using: composite
  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Setup env for MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install deps
      shell: pwsh
      run: |
        # Force non-zero exit codes to stop task (similar to how linux/mac runners work).
        $PSNativeCommandUseErrorActionPreference = $true
        $ErrorActionPreference = 'Stop'
        # Install packages
        # DO NOT INSTALL PYTHON HERE - Should have been installed in previous task.
        choco install -y --no-progress curl
        # Install meson and deps required by meson.
        python -m pip install --upgrade pip
        python -m pip install meson ninja   # Install meson - ninja is needed by meson to do the actual compiling
        {% if cookiecutter.include_python_extension != 'false' -%}
        # Install python requirements.
        python -m pip install build  # Required for building python extension
        {%- endif %}
        {% if cookiecutter.include_python_extension == 'true_with_numpy' -%}
        python -m pip install numpy
        {%- endif %}
        {% if cookiecutter.min_boost_version != 'na' -%}
        # DO NOT INSTALL BOOST HERE - Set version for installation in subsequent steps.
        $BOOST_VER="{{ cookiecutter.min_boost_version }}"
        Add-Content $Env:GITHUB_ENV "BOOST_VER=$BOOST_VER"
        {%- endif %}
        {% if cookiecutter.include_doxygen -%}
        # Install doxygen.
        choco install -y --no-progress doxygen.install
        choco install -y --no-progress graphviz
        {%- endif %}
        # Extract MSVC version
        $MSVC_VER = (cl 2>&1 | Select-String -Pattern 'Compiler Version\s*([0-9.]+)' -CaseSensitive:$false).Matches[0].Groups[1].Value
        Add-Content $Env:GITHUB_ENV "MSVC_VER=$MSVC_VER"
    {% if cookiecutter.min_boost_version != 'na' -%}
    # NOTE: You may be able to download boost via choco in the block above and avoid building from scratch in the steps below. Ensure
    #       that the version of boost provided by choco is >= min version you're expecting ({{ cookiecutter.min_boost_version }}).
    - name: Cache Boost
      id: boost-cache
      uses: actions/cache@v4
      with:
        path: ~/boost-msvc
        key: {{ "boost-${{ env.BOOST_VER }}-msvc${{ env.MSVC_VER }}-${{ runner.os }}-${{ runner.arch }}" }}
    - name: Build Boost if cache miss
      if: steps.boost-cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Force non-zero exit codes to stop task (similar to how linux/mac runners work).
        $PSNativeCommandUseErrorActionPreference = $true
        $ErrorActionPreference = 'Stop'
        # Download boost and build.
        #
        # NOTE: The b2 arguments used below have the following meaning...
        #
        #        * -j $env:NUMBER_OF_PROCESSORS utilizes all cores, to keep the build fast.
        #        * -variant=release builds a release version of boost (as opposed to a debug version).
        #          (see https://stackoverflow.com/q/73237306)
        #        * -threading-multi builds a thread-aware version of boost. Note that thread-aware does not mean thread-safe: Thread-safe
        #          means that access to the same object from multiple threads is safe, while thread-aware means that boost objects work
        #          fine when used solely within a single thread of a multithreaded application.
        #          (https://stackoverflow.com/a/20991533)
        #        * -address-model=64 prevents 32-bit builds: According to o3 if you don't have it there, the build process happens for both
        #           32-bit and 64-bit platforms. For the 32-bite build, there's no 32-bit version of Python to compile against, and so the
        #           build fails. As such, this targets only 64-bit.
        #
        # NOTE: Unlike on Mac and Linux, Boost's b2 doesn't use --prefix from bootstrap on Windows. Apparently, it expects that you pass
        #       --prefix into b2 (in addition to bootstrap?).
        #       (see https://beta.boost.org/doc/libs/1_87_0/more/getting_started/windows.html#id38)
        #
        # NOTE: Unlike on Mac and Linux, Boost's b2 seems to place files in versioned directories when running on windows (e.g.,
        #       --prefix=C:\Users\runneradmin\boost-msvc will place includes in
        #       C:\Users\runneradmin\boost-msvc\include\boost-1_87\boost instead of
        #       C:\Users\runneradmin\boost-msvc\include\boost). Apparently, on Linux and Mac, the default is --layout=system while on
        #       Windows it's --layout=versioned. To keep things consistent, --layout=system is explicitly being set.
        #       (see https://manpages.debian.org/bullseye-backports/libboost1.81-tools-dev/b2.1.en.html#The)
        $BOOST_VER=$env:BOOST_VER
        $ver_us = $BOOST_VER -replace '\.','_'
        $bundle_url = "https://archives.boost.io/release/$BOOST_VER/source/boost_$ver_us.tar.bz2"
        $bundle_dst = Join-Path $env:TEMP "boost_$ver_us.tar.bz2"
        curl.exe -L "$bundle_url" -o "$bundle_dst"
        tar -xjf "$bundle_dst" -C "$env:TEMP"
        $boost_src_dir = Get-ChildItem -Path (Join-Path $env:TEMP "boost_*") -Directory | Select-Object -First 1
        Set-Location $boost_src_dir.FullName
        $BOOST_ROOT = Join-Path $HOME 'boost-msvc'
        ./bootstrap.bat --with-toolset=msvc --prefix=$BOOST_ROOT
        ./b2 -j $env:NUMBER_OF_PROCESSORS address-model=64 variant=release link=static,shared threading=multi --prefix=$BOOST_ROOT --layout=system install
    - name: Prime for building
      shell: pwsh
      run: |
        # Prime env for compiled boost.
        $env:BOOST_ROOT = Join-Path $HOME 'boost-msvc'
        $env:BOOST_INCLUDEDIR = Join-Path $env:BOOST_ROOT 'include'
        $env:BOOST_LIBRARYDIR = Join-Path $env:BOOST_ROOT 'lib'
        Add-Content $env:GITHUB_ENV "BOOST_ROOT=$env:BOOST_ROOT"
        Add-Content $env:GITHUB_ENV "BOOST_INCLUDEDIR=$env:BOOST_INCLUDEDIR"
        Add-Content $env:GITHUB_ENV "BOOST_LIBRARYDIR=$env:BOOST_LIBRARYDIR"
    {%- endif %}